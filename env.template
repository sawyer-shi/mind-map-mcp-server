# Mind Map MCP Server Configuration Template | 思维导图MCP服务器配置模板
# ================================================================
# Copy this file to .env and modify the values as needed
# 将此文件复制为.env并根据需要修改值
#
# Usage | 使用方法:
#   cp env.template .env
#   # Then edit .env file | 然后编辑.env文件

# Server Host Configuration | 服务器主机配置
# ================================================================
# The host address to bind the server to | 服务器绑定的主机地址
# 0.0.0.0 - Bind to all interfaces (recommended for Docker) | 绑定到所有接口（Docker推荐）
# 127.0.0.1 - Bind to localhost only (local development) | 仅绑定到本地主机（本地开发）
HOST=0.0.0.0

# Alternative host for local development | 本地开发的备用主机
LOCAL_HOST=127.0.0.1

# Port Configuration | 端口配置
# ================================================================
# Default ports for each transport protocol | 各传输协议的默认端口
# Make sure these ports are not occupied by other services
# 确保这些端口没有被其他服务占用



# Streamable HTTP Transport Port | 流式HTTP传输端口
STREAMABLE_PORT=8091

# Legacy HTTP Server Port (if needed) | 传统HTTP服务器端口（如需要）
LEGACY_PORT=8092

# Internal FastMCP Port (Docker only) | 内部FastMCP端口（仅Docker）
# This is the internal port that FastMCP binds to inside container
# 这是FastMCP在容器内绑定的内部端口
FASTMCP_INTERNAL_PORT=8000

# Debug and Development | 调试和开发
# ================================================================
# Enable debug mode for detailed logging | 启用调试模式获取详细日志
DEBUG=false

# Python logging level | Python日志级别
LOG_LEVEL=INFO

# Directory Configuration | 目录配置
# ================================================================
# Host directories for Docker volume mapping | Docker卷映射的主机目录
# These paths will be created automatically if they don't exist
# 如果这些路径不存在，将自动创建

# Temporary files directory | 临时文件目录
HOST_TEMP_PATH=./temp

# Output files directory | 输出文件目录
HOST_OUTPUT_PATH=./output

# Log files directory | 日志文件目录
HOST_LOG_PATH=./logs

# Container Configuration | 容器配置
# ================================================================
# Docker container settings | Docker容器设置

# Container restart policy | 容器重启策略
# no, always, unless-stopped, on-failure | 不重启，总是，除非停止，失败时
RESTART_POLICY=unless-stopped

# Environment Variables | 环境变量
# ================================================================
# Python environment settings | Python环境设置
PYTHONUNBUFFERED=1

# Node.js environment settings | Node.js环境设置
NODE_ENV=production

# Network Configuration | 网络配置
# ================================================================
# Docker network name | Docker网络名称
NETWORK_NAME=mind-map-network

# Custom Docker Network Driver | 自定义Docker网络驱动
NETWORK_DRIVER=bridge

# Advanced Settings | 高级设置
# ================================================================
# These settings are for advanced users only | 这些设置仅供高级用户使用

# Uvicorn worker settings | Uvicorn工作进程设置
UVICORN_WORKERS=1

# Uvicorn timeout settings (seconds) | Uvicorn超时设置（秒）
UVICORN_TIMEOUT=60

# Health check settings | 健康检查设置
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3
HEALTH_CHECK_START_PERIOD=40s

# Memory and Performance | 内存和性能
# ================================================================
# Docker container memory limits | Docker容器内存限制
# Uncomment and set if you want to limit container memory usage
# 如果要限制容器内存使用，请取消注释并设置
# MEM_LIMIT=512m
# MEM_RESERVATION=256m

# CPU limits | CPU限制
# Uncomment and set if you want to limit container CPU usage
# 如果要限制容器CPU使用，请取消注释并设置  
# CPUS=1.0
# CPU_SHARES=1024

# Example Custom Port Configuration | 示例自定义端口配置
# ================================================================
# If you need to change ports due to conflicts, modify these values:
# 如果由于端口冲突需要更改端口，请修改这些值：
#
# For different environments | 针对不同环境:
# Development | 开发环境:
#   STREAMABLE_PORT=3091
# 
# Production | 生产环境:
#   STREAMABLE_PORT=443
#   
# Testing | 测试环境:
#   STREAMABLE_PORT=18091