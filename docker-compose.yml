# Mind Map MCP Server - Multi-Transport Support | 思维导图MCP服务器 - 多传输支持
# ====================================================================
# This compose file supports two MCP transport protocols:
# - stdio: For local tools and command-line integrations
# - streamablehttp: For modern web applications with streaming HTTP
#
# 该编排文件支持两种MCP传输协议：
# - stdio: 用于本地工具和命令行集成
# - streamablehttp: 用于现代Web应用程序（流式HTTP）
#
# Configuration | 配置:
# Copy env.template to .env and customize your settings
# 将env.template复制为.env并自定义您的设置

services:
  # Stdio Transport Service | Stdio传输服务
  # Best for local tools and command-line integrations
  # 最适合本地工具和命令行集成
  mind-map-stdio:
    build:
      context: .
      dockerfile: Dockerfile
    image: mind-map-mcp-server:unified
    container_name: mind-map-stdio
    command: ["python", "mind_map_server.py", "stdio", "--host", "${HOST:-0.0.0.0}"]
    volumes:
      - "${HOST_TEMP_PATH:-./temp}:/app/temp"
      - "${HOST_OUTPUT_PATH:-./output}:/app/output"
      - "${HOST_LOG_PATH:-./logs}:/app/logs"
    networks:
      - mind-map-network
    environment:
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED:-1}
      - TRANSPORT_MODE=stdio
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HOST=${HOST:-0.0.0.0}
    restart: "no"  # stdio mode is interactive, don't auto-restart
    stdin_open: true
    tty: true
    profiles:
      - stdio  # Only start with --profile stdio

  # Streamable HTTP Transport Service | 流式HTTP传输服务
  # Modern HTTP streaming protocol for web applications
  # 用于Web应用程序的现代HTTP流式协议
  mind-map-streamable:
    build:
      context: .
      dockerfile: Dockerfile
    image: mind-map-mcp-server:unified
    container_name: mind-map-streamable
    command: ["python", "mind_map_server.py", "streamable-http", "--host", "${HOST:-0.0.0.0}", "--port", "${STREAMABLE_PORT:-8091}"]
    ports:
      - "${STREAMABLE_PORT:-8091}:${FASTMCP_INTERNAL_PORT:-8000}"
    volumes:
      - "${HOST_TEMP_PATH:-./temp}:/app/temp"
      - "${HOST_OUTPUT_PATH:-./output}:/app/output"
      - "${HOST_LOG_PATH:-./logs}:/app/logs"
    networks:
      - mind-map-network
    environment:
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED:-1}
      - TRANSPORT_MODE=streamable-http
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HOST=${HOST:-0.0.0.0}
      - UVICORN_HOST=${HOST:-0.0.0.0}
      - STREAMABLE_PORT=${STREAMABLE_PORT:-8091}
      - FASTMCP_INTERNAL_PORT=${FASTMCP_INTERNAL_PORT:-8000}
    restart: ${RESTART_POLICY:-unless-stopped}
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:${FASTMCP_INTERNAL_PORT:-8000}/mcp/')"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-40s}


# Network Configuration | 网络配置
networks:
  mind-map-network:
    driver: bridge
    
# 卷定义（可选）
volumes:
  # 持久化数据卷 | Persistent data volumes
  mind-map-temp:
    driver: local
  mind-map-output:
    driver: local
  mind-map-logs:
    driver: local

# Usage Examples | 使用示例
# ============================
#
# Setup Configuration | 设置配置:
#   cp env.template .env
#   # Edit .env file to customize settings | 编辑.env文件自定义设置
#
# Start all web transport services | 启动所有Web传输服务:
#   docker-compose up -d
#
# Start all transports including stdio | 启动包括stdio在内的所有传输服务:
#   docker-compose --profile stdio up -d
#
# Start specific services | 启动特定服务:
#   docker-compose up -d mind-map-streamable          # Streamable HTTP only
#   docker-compose --profile stdio up -d mind-map-stdio  # Stdio interactive mode
#
# Test stdio mode interactively | 交互式测试stdio模式:
#   docker-compose --profile stdio run --rm mind-map-stdio
#
# View specific service logs | 查看特定服务日志:
#   docker-compose logs -f mind-map-streamable
#   docker-compose --profile stdio logs -f mind-map-stdio
#
# Rebuild and restart | 重新构建并重启:
#   docker-compose up --build -d
#
# Stop all services | 停止所有服务:
#   docker-compose down
#   docker-compose --profile stdio down  # Include stdio
#
# Custom Configuration Examples | 自定义配置示例:
# 
# Method 1: Environment variables | 方法1：环境变量
#   STREAMABLE_PORT=8081 docker-compose up -d
#   DEBUG=true HOST=127.0.0.1 docker-compose up -d
#
# Method 2: .env file (recommended) | 方法2：.env文件（推荐）
#   # Edit .env file with your settings | 在.env文件中编辑您的设置
#   STREAMABLE_PORT=3091
#   HOST=127.0.0.1
#   DEBUG=true
#
# Configuration Variables | 配置变量:
# See env.template for complete list of configurable options
# 完整的可配置选项列表请参见env.template
#
# Key variables | 主要变量:
# - HOST: 服务器绑定地址 | Server bind address (default: 0.0.0.0)
# - STREAMABLE_PORT: 流式HTTP端口 | Streamable HTTP port (default: 8091)  
# - DEBUG: 调试模式 | Debug mode (default: false)
# - HOST_TEMP_PATH: 临时文件目录 | Temp files directory (default: ./temp)
# - HOST_OUTPUT_PATH: 输出文件目录 | Output files directory (default: ./output)
# - HOST_LOG_PATH: 日志文件目录 | Log files directory (default: ./logs)
#
# Service Endpoints | 服务端点:
# - Stdio Transport: Interactive command-line interface
# - Streamable HTTP: http://${HOST}:${STREAMABLE_PORT}/mcp (default: http://localhost:8091/mcp)